<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logistics</title>
    <link rel="stylesheet" href="css/Home.css">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
    <style>
        /* Add any additional styles here */
        #distanceResult {
            margin-top: 20px;
            font-size: 1.2em;
            color: #333;
        }
    </style>
</head>

<body>
    <nav>
        <ul>
            <a href="#" class="brands" id="menus" onclick="openNav()">
                <span class="material-symbols-outlined">menu</span>
            </a>
            <a href="#" id="hola" onclick="goToHomepage()">
                <li class="brand">
                    <img src="https://i.pinimg.com/originals/db/f5/db/dbf5db560877b9a9144e9806337447be.jpg"
                        alt="LogisticsPro" width="10"> LogisticsPro
                </li>
            </a>
            <li class="brand1"><a href="#" onclick="goToHomepage()">Home</a></li>
            <li class="brand1"><a href="#" onclick="goToAboutpage()">About</a></li>
            <li class="brand1">
                <div class="dropdown">
                    <a href="#" class="services">Services</a>
                    <a href="#" class="drop">
                        <span class="material-symbols-outlined answers">arrow_drop_down</span>
                    </a>
                    <div class="dropdown-content">
                        <a href="#" class="dropdown-content1" onclick="goToLoginpage()">
                            <p>Book</p>
                        </a>
                    </div>
                </div>
            </li>
            <li class="brand1"><a href="#" id="spaces" onclick="goToContactpage()">Contact Us</a></li>
            <div class="book"><a href="#" class="Booked" onclick="goToLoginpage()">Customer Login</a></div>
        </ul>
    </nav>
    <div id="mySidenav" class="sidenav">
        <ul>
            <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
            <li><a href="#" onclick="goToHomepage()"><span class="material-symbols-outlined">home</span>Home</a></li>
            <li><a href="#" onclick="goToLoginpage()"><span class="material-symbols-outlined">login</span>Customer
                    Login</a></li>
            <li><a href="#" onclick="goToLoginpage()"><span
                        class="material-symbols-outlined">directions_car</span>Book</a></li>
            <li><a href="#" onclick="goToDriverLoginpage()"><span
                        class="material-symbols-outlined">id_card</span> Driver Login</a></li>
            <li><a href="#" onclick="goToAboutpage()"><span class="material-symbols-outlined">info</span> About
                    Us</a></li>
            <li><a href="#" onclick="goToContactpage()"><span
                        class="material-symbols-outlined">contact_support</span> Contact Us</a></li>
        </ul>
    </div>
    <div class="dashboard">
        <h2 class="Intro">Welcome to RideEasy</h2>
        <form id="rideForm" action="#" method="get">
            <input id="name" class="autocomplete1 space1" name="name" placeholder="Enter your name" type="text" required>
            
            <select id="city" name="city" class="autocomplete spacea" required>
                <option value="" disabled selected>Select nearby source</option>
                <option value="Thane">Thane</option>
                <option value="Mumbai">Mumbai</option>
                <option value="Kalyan">Kalyan</option>
                <option value="Navi Mumbai">Navi Mumbai</option>
                <option value="Pune">Pune</option>
            </select>

            <input id="source" class="autocomplete1 space1" name="source" placeholder="Enter your source" type="text" required>
            <input id="destination" class="autocomplete1 space1" name="destination" placeholder="Enter your destination" type="text" required>
            <input id="weight" class="autocomplete1 space1" name="weight" placeholder="Enter total weight (kg)" type="number" min="0" required>
            
            <select id="vtype" name="vtype" class="autocomplete spacea" required>
                <option value="" disabled selected>Select vehicle type</option>
                <option value="Small Vehicle">Small Vehicle</option>
                <option value="Large Vehicle">Large Vehicle</option>
            </select>
            
            <input id="date" name="date" class="autocomplete1 space1" placeholder="Enter date" type="date" required>
            
            <!-- Hidden input to store the calculated cost -->
            <input type="hidden" id="calculatedCost" name="cost" value="">
            
            <button id="submitButton" class="Submit search-button" type="submit">Show Cost</button>
        </form>
        <div id="distanceResult"></div>
    </div>
    <footer>
        <p>&copy; 2024 LogisticsPro. All rights reserved.</p>
    </footer>

    <script>
        document.getElementById('rideForm').addEventListener('submit', function(e) {
            const submitButton = document.getElementById('submitButton');

            // If the button text is "Request Ride", allow the form to submit
            if (submitButton.innerText === "Request Ride") {
                // Optionally, you can add validation here before submission
                return;
            }

            // Prevent form from submitting to calculate cost first
            e.preventDefault();

            const source = document.getElementById('source').value;
            const destination = document.getElementById('destination').value;

            // Function to fetch coordinates from Nominatim
            function getCoordinates(address) {
                return fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data && data.length > 0) {
                            return {
                                lat: parseFloat(data[0].lat),
                                lon: parseFloat(data[0].lon)
                            };
                        } else {
                            throw new Error(`No coordinates found for address: ${address}`);
                        }
                    });
            }

            // Haversine formula to calculate distance between two coordinates
            function haversineDistance(coord1, coord2) {
                const toRad = angle => angle * (Math.PI / 180);
                const R = 6371; // Radius of the Earth in kilometers

                const dLat = toRad(coord2.lat - coord1.lat);
                const dLon = toRad(coord2.lon - coord1.lon);
                const lat1 = toRad(coord1.lat);
                const lat2 = toRad(coord2.lat);

                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                          Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                const distance = R * c;

                return distance; // in kilometers
            }

            // Function to calculate cost
            function calculateCost(distance, vehicleType, weight) {
                let baseFare, costPerKm;

                if (vehicleType === "Small Vehicle") {
                    baseFare = 100;
                    costPerKm = 10;
                } else if (vehicleType === "Large Vehicle") {
                    baseFare = 200;
                    costPerKm = 20;
                } else {
                    baseFare = 0;
                    costPerKm = 0;
                }

                // Additional cost based on weight
                let weightCost = 0;
                if (weight > 100) {
                    weightCost = (weight - 100) * 2 * distance; // Additional ₹2 per km for weight over 100kg
                }

                const totalCost = baseFare + (costPerKm * distance) + weightCost;
                return totalCost;
            }

            // Fetch coordinates for both source and destination
            Promise.all([getCoordinates(source), getCoordinates(destination)])
                .then(coords => {
                    const [sourceCoord, destinationCoord] = coords;
                    const distance = haversineDistance(sourceCoord, destinationCoord);
                    document.getElementById('distanceResult').innerText = `Distance: ${distance.toFixed(2)} km`;

                    // Get vehicle type and weight from the form
                    const vehicleType = document.getElementById('vtype').value;
                    const weight = parseFloat(document.getElementById('weight').value); // Ensure weight is parsed as a float

                    // Debugging step: log the weight
                    console.log('Weight:', weight);

                    // Check if weight is a valid number
                    if (isNaN(weight)) {
                        document.getElementById('distanceResult').innerText = 'Please enter a valid weight.';
                        return; // Exit the function if weight is not a number
                    }

                    // Calculate and display the cost
                    const cost = calculateCost(distance, vehicleType, weight);
                    document.getElementById('distanceResult').innerText += ` | Cost: ₹${cost.toFixed(2)}`;

                    // Set the calculated cost in the hidden input
                    document.getElementById('calculatedCost').value = cost.toFixed(2);

                    // Change the button to "Request Ride" and update form attributes
                    submitButton.innerText = "Request Ride";
                    // submitButton.classList.remove('Submit', 'search-button');
                    submitButton.classList.add('SubmitRide', 'request-button');

                    // Update form action and method for booking
                    document.getElementById('rideForm').action = "/book-cab";
                    document.getElementById('rideForm').method = "post";
                })
                .catch(error => {
                    console.error(error);
                    alert(error.message);
                });

        });

        // Optional: Functions to handle navigation (placeholders)
        function openNav() {
            document.getElementById("mySidenav").style.width = "250px";
        }

        function closeNav() {
            document.getElementById("mySidenav").style.width = "0";
        }

        function goToHomepage() {
            // Implement navigation logic
            console.log("Navigating to Homepage");
        }

        function goToAboutpage() {
            // Implement navigation logic
            console.log("Navigating to About Page");
        }

        function goToLoginpage() {
            // Implement navigation logic
            console.log("Navigating to Login Page");
        }

        function goToDriverLoginpage() {
            // Implement navigation logic
            console.log("Navigating to Driver Login Page");
        }

        function goToContactpage() {
            // Implement navigation logic
            console.log("Navigating to Contact Page");
        }
    </script>
    
<script src="/js/script.js"></script>
<script src="/js/user.js"></script>
</body>

</html>
